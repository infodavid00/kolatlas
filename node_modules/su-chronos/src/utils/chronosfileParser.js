
"use strict";

function reportError(variableName) {
   console.log(`chronos detected a duplicate for \`${variableName}\``);
}

/**
 * Chronos version of the JS string split function, with the exception that this 
 * only split the first occurence
 */
function split(string, sep) {
  const result = ["", ""];
  let reachedDelimeter = false;
  if (/^\s*/.test(string)) {
    string.split("").forEach((char, index) => {
      if (char !== sep) {
        if (!reachedDelimeter) result[0] = result[0] + char;
        else result[1] = result[1] + char;
      } else {
        if (reachedDelimeter === false) {
          reachedDelimeter = true;
        } else result[1] = result[1] + char;
      }
    });
    return result;
  } else return [""];
}

/**
 * This function parses the contents of a `Chronosfile` to a javascript object.
 * Using escape characters as key names causes the parser to ignore that variable.
 *
 * On strict parsing, two variables cannot bear the same key name and an error would
 * be thrown if the parser encounters such situation.
 *
 * Chronos consideres any line starting with the `#` symbol a comment
 * 
 * @param {string} content - The Chronosfile file content.
 * @param {boolean} strict - A boolean indicating wether strict parsing should be used
 * or not.
 * @returns {object}
*/
export default function parser(content, strict) {
  if (typeof content === "string") {
    let tokens = content.split("\n");
    content = {};
    tokens = tokens.map(token => {
        if (!/^\s*$/.test(token) && !token.startsWith("#")) {
          let variable = split(token, "=").map(e => e.trim());
          if (variable.length !== 2 || /^\s*$/.test(variable[0])) variable = 0;
          return variable;
        } else return 0;
    }).filter(e => e !== 0).forEach(variable => {
        if (variable[0] in content && strict) {
            reportError(variable[0]);
            process.exit(0);
        } else content[variable[0]] = variable[1];
    });
  } else content = {}
  return content;
}
