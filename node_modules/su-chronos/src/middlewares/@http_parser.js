
"use strict";

/**
 * Parses the request body and converts it to a javascript object if the content type 
 * was set to `application/json`. 
 * 
 * The client would get a `400: Could not process your request due to incorrect json string` as a
 * response if the content type was set to `application/json` but chronos could not parse the reqeust body 
 * to a javascript object due to bad json string structure.
 * 
 * @param {object} request - The request object. 
 * @param {object} response - The response object. 
 * @param {object} nextHandler - The next Handler. 
 */
export function rawBodyParser(request, response, nextHandler) {
    let payload = "";
    let error = 0;
    request.on("data", chunk => {
        if (error === 0) {
            const maxByteLength = (1024 * 10); //10 KILOBYTE
            const payloadSize = Buffer.byteLength(payload) + Buffer.byteLength(chunk);
            if (payloadSize > maxByteLength) {
                error = 1;
                response.statusCode = 403;
                response.setHeader("Content-Type", "text/plain");
                response.end(
                    `Maximum payload size reached. expected <= ${maxByteLength}B, recieved ${payloadSize}B`
                );
            } else payload += chunk;
        }
    });
    request.on("end", () => { 
        //If error is 1, then do not execute this block as it means, the previous 
        //Block has already ended the request with an error.
        if (error === 0) {
            try {
                const contentType = request.headers["content-type"];
                if (payload && contentType === "application/json") {
                    payload = JSON.parse(payload);
                }
                request.body = payload;
                nextHandler(request, response);
            } catch {
                response.setHeader("Content-Type", "text/plain");
                response.statusCode = 400;
                response.end(
                    "Could not process your request due to incorrect json string in the request payload."
                );
            }
        }
    });
}

/**
 * Decodes the request url from percent encoding/url encoded string to plain ascii string.
 * 
 * @param {object} request - The request object. 
 * @param {object} response - The response object. 
 * @param {object} nextHandler - The next Handler. 
 */
export function urlDecoder(request, response, nextHandler) {
    request.url = decodeURIComponent(request.url);
    nextHandler(request, response);
}
